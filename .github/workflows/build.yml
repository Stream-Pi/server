name: Build

on:
  workflow_run:
    workflows: ["Init"]
    types:
      - completed

jobs:
  linux-x64:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install axel xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          architecture: x64
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-18-ea+7_linux-x64_bin-jmods.zip -d /tmp
      - name: Setup AppImage
        run: |
          cd /tmp
          axel -n 8 https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create DEB, PKG, ZIP
        run: |

          # Create DEB
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --linux-menu-group "Stream-Pi" \
          --type deb

          # Create AppImage
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --type app-image

          cp assets/linux-icon.png "${INSTALL_DIR}/Stream-Pi Server/Stream-Pi Server.png"
          cp assets/AppImage/* "${INSTALL_DIR}/Stream-Pi Server/"

          mv "${INSTALL_DIR}/Stream-Pi Server" "${INSTALL_DIR}/Stream-Pi Server.AppDir"
          /tmp/appimagetool-x86_64.AppImage "${INSTALL_DIR}/Stream-Pi Server.AppDir" "stream-pi-server-linux-x64-${{ env.VERSION }}.AppImage"


          NEW_V=${{ env.VERSION }}
          NEW_V=${NEW_V//-/_}

          # Create RPM
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version $NEW_V \
          --type rpm

          mv ${INSTALL_DIR}/*.deb stream-pi-server-linux-x64-${{ env.VERSION }}.deb
          mv ${INSTALL_DIR}/*.rpm stream-pi-server-linux-x64-${{ env.VERSION }}.rpm
        env:
          MAIN_CLASS: com.stream_pi.server.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-18/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving Linux x64 DEB
        uses: actions/upload-artifact@v2
        with:
          name: linux-deb-x64
          path: stream-pi-server-linux-x64-${{ env.VERSION }}.deb
      - name: Saving Linux x64 RPM
        uses: actions/upload-artifact@v2
        with:
          name: linux-rpm-x64
          path: stream-pi-server-linux-x64-${{ env.VERSION }}.rpm
      - name: Saving Linux x64 AppImage
        uses: actions/upload-artifact@v2
        with:
          name: linux-app-image-x64
          path: stream-pi-server-linux-x64-${{ env.VERSION }}.AppImage

  linux-x86:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install libarchive-tools axel xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: zulu
          architecture: x86
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://github.com/rnayabed/jfx-builds/raw/master/openjfx-18-internal_linux-x86_bin-jmods.zip
          unzip /tmp/openjfx-18-internal_linux-x86_bin-jmods.zip -d /tmp
      - name: Setup AppImage
        run: |
          cd /tmp
          axel -n 8 https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-i686.AppImage
          chmod +x appimagetool-i686.AppImage
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create DEB, PKG, ZIP
        run: |

          # Create DEB
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --linux-menu-group "Stream-Pi" \
          --type deb

          # Create AppImage
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --type app-image

          cp assets/linux-icon.png "${INSTALL_DIR}/Stream-Pi Server/Stream-Pi Server.png"
          cp assets/AppImage/* "${INSTALL_DIR}/Stream-Pi Server/"

          mv "${INSTALL_DIR}/Stream-Pi Server" "${INSTALL_DIR}/Stream-Pi Server.AppDir"

          /tmp/appimagetool-i686.AppImage --appimage-extract
          squashfs-root/AppRun "${INSTALL_DIR}/Stream-Pi Server.AppDir" "stream-pi-server-linux-x86-${{ env.VERSION }}.AppImage"


          NEW_V=${{ env.VERSION }}
          NEW_V=${NEW_V//-/_}

          # Create RPM
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version $NEW_V \
          --type rpm

          mv ${INSTALL_DIR}/*.deb stream-pi-server-linux-x86-${{ env.VERSION }}.deb
          mv ${INSTALL_DIR}/*.rpm stream-pi-server-linux-x86-${{ env.VERSION }}.rpm
        env:
          MAIN_CLASS: com.stream_pi.server.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-18/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving Linux x86 DEB
        uses: actions/upload-artifact@v2
        with:
          name: linux-deb-x86
          path: stream-pi-server-linux-x86-${{ env.VERSION }}.deb
      - name: Saving Linux x86 RPM
        uses: actions/upload-artifact@v2
        with:
          name: linux-rpm-x86
          path: stream-pi-server-linux-x86-${{ env.VERSION }}.rpm
      - name: Saving Linux x86 AppImage
        uses: actions/upload-artifact@v2
        with:
          name: linux-app-image-x86
          path: stream-pi-server-linux-x86-${{ env.VERSION }}.AppImage

  macos-x64:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          architecture: x64
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Setup JavaFX
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_osx-x64_bin-jmods.zip
          unzip /tmp/openjfx-18-ea+7_osx-x64_bin-jmods.zip -d /tmp
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create PKG
        run: |

          # Create PKG
          .github/scripts/jpackage.sh \
          --icon assets/macos-icon.icns \
          --mac-package-identifier stream-pi-server \
          --type pkg

          cd $INSTALL_DIR
          mv *.pkg stream-pi-server-macos-x64-${{ env.VERSION }}.pkg
        env:
          MAIN_CLASS: com.stream_pi.server.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-18/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving MacOS x64 PKG
        uses: actions/upload-artifact@v2
        with:
          name: macos-pkg-x64
          path: target/install/stream-pi-server-macos-x64-${{ env.VERSION }}.pkg

  windows-x64:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          architecture: x64
      - name: Delete Default.zip
        run: |
          del src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Setup JavaFX
        run: |
          curl.exe -o D:\openjfx-18-ea+7_windows-x64_bin-jmods.zip https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_windows-x64_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-18-ea+7_windows-x64_bin-jmods.zip D:\
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Create Bundle using JPackage
        id: project
        shell: cmd
        run: |
          call .github\scripts\jpackage.bat
        env:
          MAIN_CLASS: com.stream_pi.server.Main
          JAVAFX_JMODS: D:\javafx-jmods-18\
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
          ARCH: x64
      - name: Saving Windows x64 MSI
        uses: actions/upload-artifact@v2
        with:
          name: windows-msi-x64
          path: target/install/*.msi

  windows-x86:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: zulu
          architecture: x86
      - name: Delete Default.zip
        run: |
          del src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Setup JavaFX
        run: |
          curl.exe -o D:\openjfx-18-ea+7_windows-x86_bin-jmods.zip https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_windows-x86_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-18-ea+7_windows-x86_bin-jmods.zip D:\
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Create Bundle using JPackage
        id: project
        shell: cmd
        run: |
          call .github\scripts\jpackage.bat
        env:
          MAIN_CLASS: com.stream_pi.server.Main
          JAVAFX_JMODS: D:\javafx-jmods-18\
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
          ARCH: x86
      - name: Saving Windows x86 MSI
        uses: actions/upload-artifact@v2
        with:
          name: windows-msi-x86
          path: target/install/*.msi

  linux-arm32:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - uses: uraimo/run-on-arch-action@v2.0.10
        name: Build & save Linux ARM32 ZIP
        with:
          arch: armv6
          distro: buster

          run: |
            sudo apt update
            sudo apt install axel unzip zip

            VERSION=$(<version.txt)
            INSTALL_DIR=target/install
            mkdir -p $INSTALL_DIR
            mv target/lib/* $INSTALL_DIR
            axel -n 8 https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_linux-arm32_bin-sdk.zip
            unzip openjfx-18-ea+7_linux-arm32_bin-sdk.zip -d javafx-sdk-arm32
            mv javafx-sdk-arm32/javafx-sdk-18/legal javafx-sdk-arm32/javafx-sdk-18/javafx-legal

            # Remove libgluon to prevent running server in fb mode
            rm -rf javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm*.so

            # Use Debug libgluon
            #mv javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm_debug-1.1.6.so javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm.so
            rm -rf javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm-1.1.6.so

            # Use Non Debug libgluon
            # mv javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm-1.1.6.so javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm.so
            # rm -rf javafx-sdk-arm32/javafx-sdk-18/lib/libgluon_drm_debug-1.1.6.so

            mv javafx-sdk-arm32/javafx-sdk-18/lib/* $INSTALL_DIR/
            cp assets/launchers/arm/run $INSTALL_DIR/run
            cp assets/launchers/arm/run_min $INSTALL_DIR/run_min
            cp assets/linux-icon.png $INSTALL_DIR/app-icon.png
            chmod +x $INSTALL_DIR/run
            chmod +x $INSTALL_DIR/run_min

            #Download jdk
            axel -n 8 https://cdn.azul.com/zulu-embedded/bin/zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz
            tar -xvzf zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz

            #Run jpackage
            zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf/bin/jlink --no-header-files --no-man-pages --add-modules java.base,java.logging,java.net.http,java.scripting,jdk.jsobject,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,java.xml,java.management,jdk.localedata,java.sql,jdk.crypto.ec --output $INSTALL_DIR/jre

            cd target/
            mv install stream-pi-server
            zip -r stream-pi-server-linux-arm32-$VERSION-executable.zip stream-pi-server

      - name: Saving Linux ARM32 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-arm32
          path: target/stream-pi-server-linux-arm32-${{ env.VERSION }}-executable.zip

  linux-aarch64 :
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Delete Default.zip
        run: |
          rm -rf src/main/resources/com/stream_pi/server/Default.zip
      - name: Downloading Default.zip ...
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: default-zip
          path: src/main/resources/com/stream_pi/server
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - uses: uraimo/run-on-arch-action@v2.0.10
        name: Build & save Linux aarch64 ZIP
        with:
          arch: aarch64
          distro: buster

          run: |
            apt update
            apt -y install axel unzip zip wget

            VERSION=$(<version.txt)
            INSTALL_DIR=target/install
            mkdir -p $INSTALL_DIR
            mv target/lib/* $INSTALL_DIR

            axel -n 8 https://download2.gluonhq.com/openjfx/18/openjfx-18-ea+7_linux-aarch64_bin-sdk.zip
            unzip openjfx-18-ea+7_linux-aarch64_bin-sdk.zip -d javafx-sdk-aarch64
            mv javafx-sdk-aarch64/javafx-sdk-18/legal javafx-sdk-aarch64/javafx-sdk-18/javafx-legal

            mv javafx-sdk-aarch64/javafx-sdk-18/lib/* $INSTALL_DIR/
            cp assets/launchers/arm/run $INSTALL_DIR/run
            cp assets/launchers/arm/run_min $INSTALL_DIR/run_min
            cp assets/linux-icon.png $INSTALL_DIR/app-icon.png
            chmod +x $INSTALL_DIR/run
            chmod +x $INSTALL_DIR/run_min


            #Download jdk
            axel -k -n 8 https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.1%2B12/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.1_12.tar.gz
            tar -xvzf OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.1_12.tar.gz

            #Run jpackage
            jdk-17.0.1+12/bin/jlink --no-header-files --no-man-pages --add-modules java.base,java.logging,java.net.http,java.scripting,jdk.jsobject,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,java.xml,java.management,jdk.localedata,java.sql,jdk.crypto.ec --output $INSTALL_DIR/jre

            cd target/
            mv install stream-pi-server
            zip -r stream-pi-server-linux-aarch64-$VERSION-executable.zip stream-pi-server

      - name: Saving Linux aarch64 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip-aarch64
          path: target/stream-pi-server-linux-aarch64-${{ env.VERSION }}-executable.zip
